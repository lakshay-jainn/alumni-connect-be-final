// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  STUDENT
  ALUMNI
  ADMIN
}

enum STATUS {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                         String          @id @default(uuid())
  username                   String          @unique
  email                      String          @unique
  password                   String
  role                       ROLE            @default(STUDENT)
  rollNumber                 String?
  profileImage               String          @default("https://i.ibb.co/QFf9SC8/img-avatar.png")
  profile                    Profile?        // 101 with alumni profile
  sentConnectionRequests     Connection[]    @relation("SentConnections")
  receivedConnectionRequests Connection[]    @relation("ReceivedConnections")
  communities                Community[]     @relation("CommunityMembers")
  posts                      Post[]
  postLikes                  PostLike[]
  commentLikes               CommentLike[]
  comments                   Comment[]
  notifications              Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

}

model Profile {
  userId                      String   @id @unique
  enrollmentNumber            String?
  skills                      String[]
  profileCompletionPercentage String   @default("0")
  resume                      String?
  about                       String?
  banner                      String @default("https://static.licdn.com/aero-v1/sc/h/55k1z8997gh8dwtihm11aajyq")
  education                   Json?
  basic                       Json?
  accomplishments             Json?
  personalDetails             Json?
  socialLinks                 Json?
  workExperience              workExperience[] 
  status                      STATUS   @default(PENDING)
  batch                       String?
  user                        User     @relation(fields: [userId], references: [id] , onDelete: Cascade)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @default(now()) @updatedAt

  @@index([userId,status])
}
model workExperience {
  workId            String  @id
  userId            String  
  remote            Boolean
  skills            String[]
  startDate         String?
  endDate           String?
  location          String?
  description       String?
  designation       String?
  organisation      String?
  employmentType    String?
  currentlyWorking  Boolean?
  createdAt         DateTime @default(now())
  profile           Profile? @relation(fields:[userId],references:[userId])
}

model Events {
  id             String   @id @default(uuid())
  title          String?
  description    String?
  time           String
  location       String?
  importantLinks String[]
  eventImage     String?
  eventData      String?
  createdAt      DateTime @default(now())
}

model Carousel {
  id          String   @id @default(uuid())
  name        String
  description String
  image       String
  batch       String
  createdAt   DateTime @default(now())
}


model Connection {
  id         String   @id @default(uuid())
  senderId   String
  sender     User     @relation("SentConnections", fields: [senderId], references: [id],onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedConnections", fields: [receiverId], references: [id],onDelete: Cascade)
  status     STATUS   @default(PENDING)
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
  @@index([senderId, receiverId])
  @@index([senderId,status])
  @@index([receiverId,status])
}

model Community {
  id          String @id @default(uuid())
  name        String @unique
  description String 
  role        ROLE[]
  posts       Post[]
  members     User[] @relation("CommunityMembers")
}

model Post {
  id           String     @id @default(uuid())
  content      String     @default("")
  caption      String     @default("")
  userId       String
  user         User       @relation(fields: [userId], references: [id],onDelete: Cascade)
  likesCount   Int        @default(0)
  commentCount Int        @default(0)
  likes        PostLike[]
  comments     Comment[]
  Community    Community? @relation(fields: [communityId], references: [id])
  communityId  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@index([createdAt(desc)])
}

model Comment {
  id         String        @id @default(uuid())
  comment    String
  post       Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  likesCount Int           @default(0)
  likes      CommentLike[]

  createdAt DateTime @default(now())

  @@index([createdAt(desc)])
}

model PostLike {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model CommentLike {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id],onDelete: Cascade)
  commentId String
  Comment   Comment @relation(fields: [commentId], references: [id],onDelete: Cascade)

  @@unique([userId, commentId])
}
model Notification {
  id          String      @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  action      String   
  description String   
  logo        String
  url         String?  
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  @@unique([id,userId])
}
